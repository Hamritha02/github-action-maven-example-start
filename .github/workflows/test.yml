# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
 
name: Java CI with Maven test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Install Talisman
      run: |
        curl https://thoughtworks.github.io/talisman/install.sh > ~/install-talisman.sh
        chmod +x ~/install-talisman.sh
        ~/install-talisman.sh 
        sudo mv /usr/local/bin
    - name: Run Talisman Checks
      run: talisman --scan > talisman-scan-report.txt

    - name: Upload Report
      uses: actions/upload-artifact@v2
      with:
          name: talisman-scan-report
          path: talisman-scan-report.txt
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        #cache: maven
    
    
    - name: Build and test with Maven
      run: mvn -B package --file pom.xml

  publish-job:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: 14
    - run: mvn -B package --file pom.xml -DskipTests
    - run: mkdir staging && cp target/*jar-with-dependencies.jar staging
    - uses: actions/upload-artifact@v1
      with:
            name: Package
            path: staging

  build-docker-image:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v2
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build Container image
      run: docker build -t ${{ secrets.DOCKER_REPO }}:latest .
    - name: Publish Docker image
      run: docker push ${{ secrets.DOCKER_REPO }}
   
